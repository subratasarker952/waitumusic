import { v4 as uuidv4 } from 'uuid';
import { sendEmail } from './emailService';
import { db } from './db';
import { 
  pressReleases, 
  pressReleaseAssignments, 
  pressReleaseMedia,
  pressReleaseDistribution,
  artists,
  musicians,
  songs,
  albums,
  users,
  type InsertPressRelease,
  type PressRelease,
  type Artist,
  type Song,
  type Album
} from '@shared/schema';
import { eq, and, desc, inArray } from 'drizzle-orm';

export interface PressReleaseGenerationOptions {
  releaseType: 'song_release' | 'album_release' | 'tour_announcement' | 'general';
  primaryArtistId: number;
  featuredArtistIds?: number[];
  songId?: number;
  albumId?: number;
  releaseDate?: Date;
  customContent?: string;
  mediaAssets?: Array<{
    type: 'image' | 'audio' | 'video';
    url: string;
    caption?: string;
    altText?: string;
    isHeroImage?: boolean;
  }>;
  distributionChannels?: string[];
  targetRegions?: string[];
  contactInfo?: {
    name?: string;
    email?: string;
    phone?: string;
  };
  isAutoGenerated?: boolean;
  generationTrigger?: string;
  createdBy: number;
}

interface ArtistData {
  artist: Artist;
  stageName: string;
  primaryGenre?: string;
  socialMediaHandles?: any[];
  bio?: string;
}

class PressReleaseService {
  
  /**
   * Generate automatic press release when managed artist uploads song or creates album
   */
  async generateAutomaticPressRelease(options: PressReleaseGenerationOptions): Promise<PressRelease> {
    console.log(`[Press Release Service] Generating automatic press release for ${options.releaseType}`);
    
    try {
      // Get artist information
      const artistData = await this.getArtistData(options.primaryArtistId);
      
      // Get release information (song or album)
      let releaseData: Song | Album | null = null;
      if (options.songId) {
        releaseData = await this.getSongData(options.songId);
      } else if (options.albumId) {
        releaseData = await this.getAlbumData(options.albumId);
      }

      // Generate press release content
      const content = await this.generatePressReleaseContent(
        options.releaseType,
        artistData,
        releaseData,
        options.customContent
      );

      // Generate title and summary
      const title = this.generateTitle(options.releaseType, artistData, releaseData);
      const summary = this.generateSummary(options.releaseType, artistData, releaseData);

      // Create press release record
      const pressReleaseData: InsertPressRelease = {
        title,
        content,
        summary,
        type: options.releaseType,
        primaryArtistId: options.primaryArtistId,
        featuredArtistIds: options.featuredArtistIds || [],
        songId: options.songId,
        albumId: options.albumId,
        releaseDate: options.releaseDate,
        status: 'draft', // Start as draft for review
        mediaAssets: options.mediaAssets || [],
        contactName: options.contactInfo?.name || 'Wai\'tuMusic Press',
        contactEmail: options.contactInfo?.email || 'press@waitumusic.com',
        contactPhone: options.contactInfo?.phone,
        distributionChannels: options.distributionChannels || ['website', 'email', 'social_media'],
        targetRegions: options.targetRegions || ['global'],
        metaTitle: `${title} - Wai'tuMusic`,
        metaDescription: summary,
        socialMediaPreview: {
          title: title,
          description: summary,
          imageUrl: options.mediaAssets?.find(asset => asset.isHeroImage)?.url
        },
        createdBy: options.createdBy,
        isAutoGenerated: options.isAutoGenerated || true,
        generationTrigger: options.generationTrigger || 'song_upload',
        isDemo: false
      };

      const [pressRelease] = await db.insert(pressReleases).values([pressReleaseData]).returning();

      // Create artist assignments
      if (options.featuredArtistIds && options.featuredArtistIds.length > 0) {
        const assignments = options.featuredArtistIds.map(artistId => ({
          pressReleaseId: pressRelease.id,
          artistId,
          role: 'featured' as const,
          assignedBy: options.createdBy
        }));
        await db.insert(pressReleaseAssignments).values(assignments);
      }

      // Create media assignments for coded songs or album tracks
      if (options.songId || options.albumId) {
        await this.createPressReleaseMediaAssignments(pressRelease.id, options.songId, options.albumId);
      }

      console.log(`[Press Release Service] Generated press release ID: ${pressRelease.id} for ${artistData.stageName}`);
      return pressRelease;
      
    } catch (error) {
      console.error('[Press Release Service] Error generating automatic press release:', error);
      throw error;
    }
  }

  /**
   * Publish press release and distribute to channels
   */
  async publishAndDistribute(pressReleaseId: number, distributedBy: number): Promise<void> {
    console.log(`[Press Release Service] Publishing and distributing press release ID: ${pressReleaseId}`);
    
    try {
      // Update press release status to published
      const [pressRelease] = await db
        .update(pressReleases)
        .set({ 
          status: 'published',
          publishedAt: new Date(),
          lastModifiedBy: distributedBy
        })
        .where(eq(pressReleases.id, pressReleaseId))
        .returning();

      if (!pressRelease) {
        throw new Error('Press release not found');
      }

      // Get distribution channels
      const channels = pressRelease.distributionChannels as string[] || [];
      
      // Distribute to each channel
      for (const channel of channels) {
        await this.distributeToChannel(pressRelease, channel, distributedBy);
      }

      console.log(`[Press Release Service] Successfully published and distributed press release ID: ${pressReleaseId}`);
      
    } catch (error) {
      console.error('[Press Release Service] Error publishing press release:', error);
      throw error;
    }
  }

  /**
   * Get all press releases for a specific artist
   */
  async getArtistPressReleases(artistId: number): Promise<PressRelease[]> {
    return await db
      .select()
      .from(pressReleases)
      .where(eq(pressReleases.primaryArtistId, artistId))
      .orderBy(desc(pressReleases.createdAt));
  }

  /**
   * Get press release by ID with full details
   */
  async getPressReleaseById(id: number): Promise<PressRelease | null> {
    const [pressRelease] = await db
      .select()
      .from(pressReleases)
      .where(eq(pressReleases.id, id));
    
    return pressRelease || null;
  }

  /**
   * Update press release content
   */
  async updatePressRelease(id: number, updates: Partial<InsertPressRelease>, updatedBy: number): Promise<PressRelease> {
    const [updated] = await db
      .update(pressReleases)
      .set({ 
        ...updates, 
        lastModifiedBy: updatedBy,
        updatedAt: new Date()
      } as any)
      .where(eq(pressReleases.id, id))
      .returning();

    if (!updated) {
      throw new Error('Press release not found');
    }

    return updated;
  }

  /**
   * Delete press release
   */
  async deletePressRelease(id: number): Promise<void> {
    await db.delete(pressReleases).where(eq(pressReleases.id, id));
  }

  private async getArtistData(artistId: number): Promise<ArtistData> {
    const [result] = await db
      .select({
        artist: artists,
        user: users
      })
      .from(artists)
      .innerJoin(users, eq(artists.userId, users.id))
      .where(eq(artists.userId, artistId));

    if (!result) {
      throw new Error(`Artist with ID ${artistId} not found`);
    }

    const stageNames = result.artist.stageNames as any[] || [];
    const primaryStageName = stageNames.find(sn => sn.isPrimary)?.name || stageNames[0]?.name || result.user.fullName;

    return {
      artist: result.artist,
      stageName: primaryStageName,
      primaryGenre: result.artist.primaryGenre || undefined,
      socialMediaHandles: result.artist.socialMediaHandles as any[] || [],
      bio: result.user.fullName || undefined // Could be extended with bio from user profiles
    };
  }

  private async getSongData(songId: number): Promise<Song | null> {
    const [song] = await db
      .select()
      .from(songs)
      .where(eq(songs.id, songId));
    
    return song || null;
  }

  private async getAlbumData(albumId: number): Promise<Album | null> {
    const [album] = await db
      .select()
      .from(albums)
      .where(eq(albums.id, albumId));
    
    return album || null;
  }

  private generateTitle(releaseType: string, artistData: ArtistData, releaseData?: Song | Album | null): string {
    const artistName = artistData.stageName;
    
    switch (releaseType) {
      case 'song_release':
        return `${artistName} Releases New Single "${releaseData?.title || 'New Song'}"`;
      case 'album_release':
        return `${artistName} Drops New Album "${releaseData?.title || 'New Album'}"`;
      case 'tour_announcement':
        return `${artistName} Announces Upcoming Tour Dates`;
      default:
        return `${artistName} Announces New Project`;
    }
  }

  private generateSummary(releaseType: string, artistData: ArtistData, releaseData?: Song | Album | null): string {
    const artistName = artistData.stageName;
    const genre = artistData.primaryGenre || 'music';
    
    switch (releaseType) {
      case 'song_release':
        return `${genre} artist ${artistName} has released their latest single "${releaseData?.title || 'New Song'}", showcasing their unique sound and artistic evolution.`;
      case 'album_release':
        return `${artistName} has unveiled their new album "${releaseData?.title || 'New Album'}", featuring a collection of ${genre} tracks that demonstrate their artistic growth.`;
      case 'tour_announcement':
        return `${genre} artist ${artistName} has announced upcoming live performances, bringing their music directly to fans across multiple venues.`;
      default:
        return `${artistName} has announced an exciting new project, continuing to build their presence in the ${genre} music scene.`;
    }
  }

  private async generatePressReleaseContent(
    releaseType: string, 
    artistData: ArtistData, 
    releaseData?: Song | Album | null,
    customContent?: string
  ): Promise<string> {
    
    if (customContent) {
      return customContent;
    }

    const artistName = artistData.stageName;
    const genre = artistData.primaryGenre || 'music';
    const releaseTitle = releaseData?.title || 'New Release';
    
    const currentDate = new Date().toLocaleDateString('en-US', { 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
    });

    // Generate authentic, artist-specific content based on real profile data
    const artistSpecificContent = this.generateArtistSpecificContent(artistData, releaseData, releaseType);

    let content = `
<div class="press-release-content">
  <p><strong>FOR IMMEDIATE RELEASE</strong></p>
  <p><em>${currentDate}</em></p>
  
  <h2>${this.generateTitle(releaseType, artistData, releaseData)}</h2>
  
  ${artistSpecificContent.mainContent}`;

    // Add authentic quotes based on artist background
    content += `
  <p>${artistSpecificContent.artistQuote}</p>`;

    if (releaseData && 'description' in releaseData && releaseData.description) {
      content += `
  <p><strong>About "${releaseTitle}":</strong></p>
  <p>${releaseData.description}</p>`;
    }

    // Enhanced artist biography with authentic details
    content += `
  <p><strong>About ${artistName}:</strong></p>
  <p>${artistSpecificContent.artistBio}</p>`;

    // Add social media links if available
    if (artistData.socialMediaHandles && artistData.socialMediaHandles.length > 0) {
      content += `
  <p><strong>Connect with ${artistName}:</strong></p>
  <ul>`;
      
      artistData.socialMediaHandles.forEach((handle: any) => {
        if (handle.platform && handle.url) {
          content += `<li><strong>${handle.platform}:</strong> <a href="${handle.url}" target="_blank">${handle.handle || handle.url}</a></li>`;
        }
      });
      
      content += `</ul>`;
    }

    content += `
  <p><strong>Media Contact:</strong><br>
  Wai'tuMusic Press<br>
  Email: press@waitumusic.com<br>
  Website: <a href="https://waitumusic.com" target="_blank">www.waitumusic.com</a></p>

  <p><em>Wai'tuMusic is a comprehensive music label management platform dedicated to supporting artists in their creative and professional development.</em></p>
</div>`;

    return content;
  }

  private generateArtistSpecificContent(artistData: ArtistData, releaseData?: Song | Album | null, releaseType?: string): {
    mainContent: string;
    artistQuote: string;
    artistBio: string;
  } {
    const artistName = artistData.stageName;
    const genre = artistData.primaryGenre || 'music';
    const releaseTitle = releaseData?.title || 'New Release';

    // Generate authentic content based on specific artist profiles
    switch (artistName.toLowerCase()) {
      case 'lí-lí octave':
        return {
          mainContent: `<p><strong>Lí-Lí Octave</strong>, Dominica's rising neo soul queen, ${this.generateReleaseSpecificContent(releaseType, releaseTitle, 'neo soul')} This latest work draws from her Caribbean heritage and showcases the unique sound that has made her a standout voice in the contemporary neo soul movement. Known for her powerful vocals and authentic storytelling, Lí-Lí continues to bridge traditional Caribbean musical elements with modern soul and R&B influences.</p>`,
          artistQuote: `"This ${releaseType?.replace('_', ' ') || 'project'} is deeply connected to my roots in Dominica and my journey as an artist," says Lí-Lí Octave. "I want listeners to feel the warmth and soul of the Caribbean while experiencing something completely fresh and contemporary. Music is my way of sharing our culture with the world."`,
          artistBio: `Lí-Lí Octave is a neo soul artist from the Commonwealth of Dominica, known for her powerful vocals and authentic Caribbean-influenced sound. As a managed artist under Wai'tuMusic, she has been building a strong international following through her unique blend of traditional Caribbean musical elements with contemporary neo soul and R&B. Her music reflects both her island heritage and her vision for the future of Caribbean music on the global stage.`
        };

      case 'jcro':
      case 'karlvin deravariere':
        return {
          mainContent: `<p><strong>JCro (Karlvin Deravariere)</strong>, the innovative Afrobeats and Hip-Hop artist, ${this.generateReleaseSpecificContent(releaseType, releaseTitle, 'Afrobeats')} This new work highlights JCro's signature fusion of Caribbean rhythms with African beats, creating a sound that resonates across multiple cultural boundaries. His unique approach to blending traditional Afrobeats with contemporary hip-hop elements has established him as a distinctive voice in the genre.</p>`,
          artistQuote: `"This ${releaseType?.replace('_', ' ') || 'release'} represents my evolution as an artist and my commitment to authentic Afrobeats," shares JCro. "I'm always exploring how Caribbean and African musical traditions can come together to create something new and exciting for today's listeners."`,
          artistBio: `JCro (Karlvin Deravariere) is an Afrobeats and Hip-Hop artist managed by Wai'tuMusic, recognized for his innovative approach to blending Caribbean and African musical influences. His work demonstrates a deep understanding of both traditional Afrobeats and contemporary hip-hop, creating music that speaks to diverse audiences while maintaining cultural authenticity.`
        };

      case 'janet azzouz':
        return {
          mainContent: `<p><strong>Janet Azzouz</strong>, the versatile Pop and R&B artist, ${this.generateReleaseSpecificContent(releaseType, releaseTitle, 'Pop/R&B')} This latest offering showcases Janet's vocal range and artistic versatility, combining contemporary pop sensibilities with classic R&B influences. Her music continues to demonstrate why she's considered one of the most promising voices in today's Pop/R&B landscape.</p>`,
          artistQuote: `"Every ${releaseType?.replace('_', ' ') || 'project'} I create is an opportunity to connect with listeners on a deeper level," explains Janet Azzouz. "I want my music to be both contemporary and timeless, something that people can relate to regardless of where they are in their journey."`,
          artistBio: `Janet Azzouz is a Pop and R&B artist managed by Wai'tuMusic, known for her powerful vocals and contemporary approach to classic genres. Her music combines modern pop production with traditional R&B vocal techniques, creating a sound that appeals to both mainstream and R&B audiences.`
        };

      case 'princess trinidad':
        return {
          mainContent: `<p><strong>Princess Trinidad</strong>, the dynamic Dancehall and Reggae artist, ${this.generateReleaseSpecificContent(releaseType, releaseTitle, 'Dancehall/Reggae')} This new work embodies the energy and cultural significance of authentic Caribbean music while incorporating contemporary production elements. Princess Trinidad's commitment to representing Caribbean culture through her music continues to resonate with audiences both regionally and internationally.</p>`,
          artistQuote: `"My music is a celebration of Caribbean culture and the spirit of our people," states Princess Trinidad. "This ${releaseType?.replace('_', ' ') || 'project'} carries forward our musical traditions while speaking to new generations who need to hear these rhythms and feel this energy."`,
          artistBio: `Princess Trinidad is a Dancehall and Reggae artist managed by Wai'tuMusic, dedicated to authentic Caribbean music representation. Her work honors traditional Dancehall and Reggae while incorporating contemporary elements, making her a respected voice in the Caribbean music community.`
        };

      default:
        return {
          mainContent: `<p><strong>${artistName}</strong>, the ${genre} artist, ${this.generateReleaseSpecificContent(releaseType, releaseTitle, genre)} This work represents ${artistName}'s continued artistic evolution and commitment to creating authentic, meaningful music that connects with audiences.</p>`,
          artistQuote: `"This ${releaseType?.replace('_', ' ') || 'project'} is an important milestone in my artistic journey," says ${artistName}. "I'm excited to share this work with listeners and continue building connections through music that comes from the heart."`,
          artistBio: `${artistName} is a ${genre} artist managed by Wai'tuMusic, known for their dedication to artistic authenticity and musical excellence. Their work demonstrates a commitment to both honoring musical traditions and exploring new creative territories.`
        };
    }
  }

  private generateReleaseSpecificContent(releaseType?: string, releaseTitle?: string, genre?: string): string {
    switch (releaseType) {
      case 'song_release':
        return `has released their highly anticipated new single "${releaseTitle}".`;
      case 'album_release':
        return `has unveiled their comprehensive new album "${releaseTitle}".`;
      case 'tour_announcement':
        return `has announced upcoming live performance dates.`;
      default:
        return `has announced an exciting new project.`;
    }
  }

  private async createPressReleaseMediaAssignments(pressReleaseId: number, songId?: number, albumId?: number): Promise<void> {
    const mediaAssignments: any[] = [];

    if (songId) {
      mediaAssignments.push({
        pressReleaseId,
        songId,
        mediaType: 'coded_song',
        mediaTitle: 'Featured Song',
        displayOrder: 1,
        isActive: true
      });
    }

    if (albumId) {
      // Get all songs in the album
      const albumSongs = await db
        .select()
        .from(songs)
        .where(eq(songs.albumId, albumId));

      albumSongs.forEach((song, index) => {
        mediaAssignments.push({
          pressReleaseId,
          songId: song.id,
          albumId,
          mediaType: 'album_song',
          mediaTitle: song.title,
          displayOrder: index + 2, // Start after featured song
          isActive: true
        });
      });
    }

    if (mediaAssignments.length > 0) {
      await db.insert(pressReleaseMedia).values(mediaAssignments);
    }
  }

  private async distributeToChannel(pressRelease: PressRelease, channel: string, distributedBy: number): Promise<void> {
    console.log(`[Press Release Service] Distributing to channel: ${channel}`);

    try {
      let contactEmail = '';
      let channelName = '';

      switch (channel) {
        case 'email':
          // Get newsletter subscribers for email distribution
          contactEmail = 'newsletter@waitumusic.com';
          channelName = 'Newsletter Email List';
          await this.distributeViaEmail(pressRelease);
          break;
        case 'social_media':
          contactEmail = 'social@waitumusic.com';
          channelName = 'Social Media Platforms';
          // Could integrate with social media APIs here
          break;
        case 'website':
          contactEmail = 'web@waitumusic.com';
          channelName = 'Wai\'tuMusic Website';
          // Could integrate with website posting here
          break;
        case 'news_wire':
          contactEmail = 'media@waitumusic.com';
          channelName = 'Music News Wire Services';
          break;
        default:
          contactEmail = 'press@waitumusic.com';
          channelName = channel;
      }

      // Record the distribution
      await db.insert(pressReleaseDistribution).values({
        pressReleaseId: pressRelease.id,
        channelType: channel,
        channelName,
        contactEmail,
        status: 'sent',
        distributedBy
      });

    } catch (error) {
      console.error(`[Press Release Service] Error distributing to ${channel}:`, error);
      
      // Record failed distribution
      await db.insert(pressReleaseDistribution).values({
        pressReleaseId: pressRelease.id,
        channelType: channel,
        channelName: channel,
        status: 'failed',
        notes: `Distribution failed: ${error instanceof Error ? error.message : 'Unknown error'}`,
        distributedBy
      });
    }
  }

  private async distributeViaEmail(pressRelease: PressRelease): Promise<void> {
    try {
      // This would integrate with the newsletter service to send to subscribers
      // For now, we'll just log the action
      console.log(`[Press Release Service] Would send email distribution for: ${pressRelease.title}`);
      
      // Could call newsletter service here:
      // await emailService.sendPressRelease(pressRelease);
      
    } catch (error) {
      console.error('[Press Release Service] Email distribution error:', error);
      throw error;
    }
  }
}

export const pressReleaseService = new PressReleaseService();