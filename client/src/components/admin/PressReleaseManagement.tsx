import React, { useState } from 'react';

interface PressReleaseManagementProps {
  userRole: string;
  userId: number;
}
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { apiRequest } from '@/lib/queryClient';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Textarea } from '@/components/ui/textarea';
import ReactQuill from 'react-quill';
import 'react-quill/dist/quill.snow.css';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { useToast } from '@/hooks/use-toast';
import MediaAssignmentModal from '@/components/modals/MediaAssignmentModal';
import { 
  Send, 
  FileText, 
  Eye, 
  Edit, 
  Trash2, 
  Plus,
  Calendar,
  Music,
  Album,
  User,
  Globe,
  Mail,
  UserPlus,
  Image,
  Video,
  X,
  Save
} from 'lucide-react';

interface PressRelease {
  id: number;
  title: string;
  content: string;
  summary: string;
  type: string;
  status: 'draft' | 'published' | 'scheduled';
  primaryArtistId: number;
  featuredArtistIds: number[];
  songId?: number;
  albumId?: number;
  releaseDate?: string;
  publishedAt?: string;
  scheduledFor?: string;
  mediaAssets: any[];
  contactName?: string;
  contactEmail?: string;
  contactPhone?: string;
  distributionChannels: string[];
  targetRegions: string[];
  viewCount: number;
  downloadCount: number;
  shareCount: number;
  pickupCount: number;
  metaTitle?: string;
  metaDescription?: string;
  socialMediaPreview?: any;
  createdBy: number;
  lastModifiedBy?: number;
  isAutoGenerated: boolean;
  generationTrigger?: string;
  createdAt: string;
  updatedAt: string;
  isDemo: boolean;
}

interface Artist {
  id: number;
  fullName: string;
  userId: number;
  stageNames: string[];
  isManaged: boolean;
}

export default function PressReleaseManagement({ userRole, userId }: PressReleaseManagementProps) {
  const [selectedRelease, setSelectedRelease] = useState<PressRelease | null>(null);
  const [isViewModalOpen, setIsViewModalOpen] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [showMediaAssignmentModal, setShowMediaAssignmentModal] = useState(false);
  const [assignedMedia, setAssignedMedia] = useState<any[]>([]);
  const [newReleaseData, setNewReleaseData] = useState({
    title: '',
    content: '',
    releaseType: 'song' as const,
    primaryArtistId: '',
    releaseDate: '',
    customContent: '',
    distributionChannels: [] as string[],
    targetRegions: [] as string[]
  });

  // Recipient management state
  const [selectedRecipients, setSelectedRecipients] = useState<number[]>([]);
  const [selectedGenres, setSelectedGenres] = useState<number[]>([]);
  const [selectedCategories, setSelectedCategories] = useState<number[]>([]);
  const [fanPriority, setFanPriority] = useState(true);
  const [showRecipientModal, setShowRecipientModal] = useState(false);
  const [recipientSearch, setRecipientSearch] = useState('');
  const [showCreateForm, setShowCreateForm] = useState(false);
  const [filterStatus, setFilterStatus] = useState<string>('all');
  const [filterArtist, setFilterArtist] = useState<string>('all');

  const { toast } = useToast();
  const queryClient = useQueryClient();

  // Fetch press releases
  const { data: pressReleasesData, isLoading: loadingReleases } = useQuery({
    queryKey: ['/api/press-releases', filterArtist, filterStatus],
    queryFn: async () => {
      const params = new URLSearchParams();
      if (filterArtist !== 'all') params.append('artistId', filterArtist);
      if (filterStatus !== 'all') params.append('status', filterStatus);
      const response = await apiRequest(`/api/press-releases?${params.toString()}`);
      return response;
    }
  });

  // Ensure pressReleases is always an array
  const pressReleases = Array.isArray(pressReleasesData) ? pressReleasesData : [];

  // Fetch artists for selection
  const { data: artistsData } = useQuery({
    queryKey: ['/api/artists'],
    queryFn: () => apiRequest('/api/artists')
  });

  // Ensure artists is always an array
  const artists = Array.isArray(artistsData) ? artistsData : [];

  // Query recipient categories
  const { data: categories = [] } = useQuery({
    queryKey: ['/api/recipient-categories'],
    queryFn: () => apiRequest('/api/recipient-categories').then(res => res.json()).then(data => data.success ? data.data : [])
  });

  // Query music genres
  const { data: genres = [] } = useQuery({
    queryKey: ['/api/music-genres'],
    queryFn: () => apiRequest('/api/music-genres').then(res => res.json()).then(data => data.success ? data.data : [])
  });

  // Query industry recipients with search/filter
  const { data: recipients = [] } = useQuery({
    queryKey: ['/api/industry-recipients', recipientSearch, selectedCategories, selectedGenres],
    queryFn: () => {
      const params = new URLSearchParams();
      if (recipientSearch) params.append('search', recipientSearch);
      if (selectedCategories.length > 0) params.append('categoryId', selectedCategories[0].toString());
      if (selectedGenres.length > 0) params.append('genreId', selectedGenres[0].toString());
      
      return apiRequest(`/api/industry-recipients?${params}`).then(res => res.json()).then(data => data.success ? data.data : []);
    }
  });

  // Create press release mutation
  const createReleaseMutation = useMutation({
    mutationFn: (data: any) => apiRequest('/api/press-releases', {
      method: 'POST',
      body: JSON.stringify(data)
    }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/press-releases'] });
      setShowCreateForm(false);
      setNewReleaseData({
        title: '',
        content: '',
        releaseType: 'song',
        primaryArtistId: '',
        releaseDate: '',
        customContent: '',
        distributionChannels: [],
        targetRegions: []
      });
      toast({
        title: "Press Release Created",
        description: "Press release created successfully",
      });
    },
    onError: (error: any) => {
      toast({
        title: "Creation Failed",
        description: error.message || "Failed to create press release",
        variant: "destructive",
      });
    }
  });

  // Auto-generate press release mutation
  const autoGenerateMutation = useMutation({
    mutationFn: (data: any) => apiRequest('/api/press-releases/auto-generate', {
      method: 'POST',
      body: JSON.stringify(data)
    }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/press-releases'] });
      toast({
        title: "Press Release Generated",
        description: "Automatic press release generated successfully",
      });
    },
    onError: (error: any) => {
      toast({
        title: "Generation Failed",
        description: error.message || "Failed to auto-generate press release",
        variant: "destructive",
      });
    }
  });

  // Publish press release mutation
  const publishMutation = useMutation({
    mutationFn: (id: number) => apiRequest(`/api/press-releases/${id}/publish`, {
      method: 'POST'
    }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/press-releases'] });
      toast({
        title: "Press Release Published",
        description: "Press release published and distributed successfully",
      });
    },
    onError: (error: any) => {
      toast({
        title: "Publication Failed",
        description: error.message || "Failed to publish press release",
        variant: "destructive",
      });
    }
  });

  const handleCreateRelease = () => {
    if (!newReleaseData.title || !newReleaseData.content || !newReleaseData.primaryArtistId) {
      toast({
        title: "Missing Information",
        description: "Please fill in all required fields",
        variant: "destructive",
      });
      return;
    }

    createReleaseMutation.mutate({
      title: newReleaseData.title,
      content: newReleaseData.content,
      releaseType: newReleaseData.releaseType,
      primaryArtistId: parseInt(newReleaseData.primaryArtistId),
      releaseDate: newReleaseData.releaseDate ? new Date(newReleaseData.releaseDate) : undefined,
      customContent: newReleaseData.customContent,
      distributionChannels: newReleaseData.distributionChannels,
      targetRegions: newReleaseData.targetRegions,
      status: 'draft'
    });
  };

  const handleAutoGenerate = () => {
    if (!newReleaseData.primaryArtistId || !newReleaseData.releaseType) {
      toast({
        title: "Missing Information",
        description: "Please select artist and release type",
        variant: "destructive",
      });
      return;
    }

    autoGenerateMutation.mutate({
      releaseType: newReleaseData.releaseType,
      primaryArtistId: parseInt(newReleaseData.primaryArtistId),
      releaseDate: newReleaseData.releaseDate ? new Date(newReleaseData.releaseDate) : undefined,
      customContent: newReleaseData.customContent,
      distributionChannels: newReleaseData.distributionChannels,
      targetRegions: newReleaseData.targetRegions
    });
  };

  const handlePublish = (release: PressRelease) => {
    publishMutation.mutate(release.id);
  };

  const handleViewRelease = (release: PressRelease) => {
    setSelectedRelease(release);
    setIsViewModalOpen(true);
  };

  const handleEditRelease = (release: PressRelease) => {
    setSelectedRelease(release);
    setNewReleaseData({
      title: release.title,
      content: release.content,
      releaseType: release.type as any,
      primaryArtistId: release.primaryArtistId.toString(),
      releaseDate: release.releaseDate || '',
      customContent: release.content,
      distributionChannels: release.distributionChannels || [],
      targetRegions: release.targetRegions || []
    });
    setIsEditModalOpen(true);
  };

  const getReleaseTypeIcon = (type: string) => {
    switch (type) {
      case 'song':
      case 'song_release': return <Music className="h-4 w-4" />;
      case 'album':
      case 'album_release': return <Album className="h-4 w-4" />;
      case 'tour':
      case 'tour_announcement': return <Calendar className="h-4 w-4" />;
      case 'collaboration': return <User className="h-4 w-4" />;
      default: return <FileText className="h-4 w-4" />;
    }
  };

  const getStatusBadge = (status: string) => {
    const variants = {
      draft: 'secondary',
      published: 'default',
      scheduled: 'outline'
    } as const;
    
    return (
      <Badge variant={variants[status as keyof typeof variants] || 'secondary'}>
        {status.charAt(0).toUpperCase() + status.slice(1)}
      </Badge>
    );
  };

  const managedArtists = artists.filter((artist: Artist) => artist.isManaged);

  if (loadingReleases) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full" />
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <div>
          <h2 className="text-2xl font-bold">Press Release Management</h2>
          <p className="text-muted-foreground">Create and manage press releases for managed artists</p>
        </div>
        
        <div className="w-full sm:w-auto">
          <Button 
            onClick={() => setShowCreateForm(!showCreateForm)}
            className="flex items-center justify-center gap-2 w-full sm:w-auto"
          >
            <Plus className="h-4 w-4" />
            <span className="hidden xs:inline">New Press Release</span>
            <span className="xs:hidden">New Release</span>
          </Button>
        </div>
      </div>

      {/* Filters */}
      <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
        <Select value={filterStatus} onValueChange={setFilterStatus}>
          <SelectTrigger className="w-full">
            <SelectValue placeholder="Filter by status" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">All Status</SelectItem>
            <SelectItem value="draft">Draft</SelectItem>
            <SelectItem value="published">Published</SelectItem>
            <SelectItem value="scheduled">Scheduled</SelectItem>
          </SelectContent>
        </Select>

        <Select value={filterArtist} onValueChange={setFilterArtist}>
          <SelectTrigger className="w-full">
            <SelectValue placeholder="Filter by artist" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">All Artists</SelectItem>
            {managedArtists.map((artist: Artist) => (
              <SelectItem key={artist.userId} value={artist.userId.toString()}>
                {artist.stageNames?.[0] || artist.fullName}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
      </div>

      {/* Create/Auto-Generate Form */}
      {showCreateForm && (
        <Card>
          <CardHeader>
            <CardTitle>Create Press Release</CardTitle>
            <CardDescription>
              Manually create or auto-generate a press release for managed artists
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="text-sm font-medium">Artist</label>
                <Select value={newReleaseData.primaryArtistId} onValueChange={(value) => 
                  setNewReleaseData({ ...newReleaseData, primaryArtistId: value })
                }>
                  <SelectTrigger>
                    <SelectValue placeholder="Select artist" />
                  </SelectTrigger>
                  <SelectContent>
                    {managedArtists.map((artist: Artist) => (
                      <SelectItem key={artist.userId} value={artist.userId.toString()}>
                        {artist.stageNames?.[0] || artist.fullName}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              <div>
                <label className="text-sm font-medium">Release Type</label>
                <Select value={newReleaseData.releaseType} onValueChange={(value: any) => 
                  setNewReleaseData({ ...newReleaseData, releaseType: value })
                }>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="song">Song Release</SelectItem>
                    <SelectItem value="album">Album Release</SelectItem>
                    <SelectItem value="tour">Tour Announcement</SelectItem>
                    <SelectItem value="collaboration">Collaboration</SelectItem>
                    <SelectItem value="achievement">Achievement</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            <div>
              <label className="text-sm font-medium">Title</label>
              <input
                type="text"
                className="w-full mt-1 px-3 py-2 border rounded-md"
                value={newReleaseData.title}
                onChange={(e) => setNewReleaseData({ ...newReleaseData, title: e.target.value })}
                placeholder="Press release title"
              />
            </div>

            <div>
              <label className="text-sm font-medium">Content</label>
              <div className="border rounded-md mt-1">
                <ReactQuill
                  theme="snow"
                  value={newReleaseData.content}
                  onChange={(content) => setNewReleaseData({ ...newReleaseData, content })}
                  placeholder="Press release content with rich formatting (leave empty for auto-generation)..."
                  modules={{
                    toolbar: [
                      [{ 'header': [1, 2, 3, false] }],
                      ['bold', 'italic', 'underline', 'strike'],
                      [{ 'color': [] }, { 'background': [] }],
                      [{ 'list': 'ordered'}, { 'list': 'bullet' }],
                      [{ 'align': [] }],
                      ['link', 'image'],
                      ['clean']
                    ],
                  }}
                  formats={[
                    'header', 'bold', 'italic', 'underline', 'strike',
                    'color', 'background', 'list', 'bullet', 'align',
                    'link', 'image'
                  ]}
                  style={{ minHeight: '200px' }}
                />
              </div>
            </div>

            {/* Media Assignment Section */}
            <div className="border rounded-lg p-4">
              <div className="flex items-center justify-between mb-4">
                <div>
                  <h4 className="font-medium">Media Attachments</h4>
                  <p className="text-sm text-muted-foreground">
                    Assign images, videos, and documents to this press release
                  </p>
                </div>
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => setShowMediaAssignmentModal(true)}
                >
                  <Plus className="h-4 w-4 mr-2" />
                  Assign Media
                </Button>
              </div>
              
              {/* Assigned Media Preview */}
              {assignedMedia.length > 0 ? (
                <div className="grid gap-3">
                  {assignedMedia.map((media) => (
                    <div key={media.id} className="flex items-center justify-between p-3 border rounded">
                      <div className="flex items-center space-x-3">
                        {media.type === 'image' && <Image className="h-5 w-5 text-blue-500" />}
                        {media.type === 'video' && <Video className="h-5 w-5 text-green-500" />}
                        {media.type === 'document' && <FileText className="h-5 w-5 text-orange-500" />}
                        <div>
                          <p className="font-medium text-sm">{media.name}</p>
                          <p className="text-xs text-muted-foreground">
                            {media.type} • {media.size}
                          </p>
                        </div>
                      </div>
                      <Button
                        variant="ghost"
                        size="sm"
                        type="button"
                        onClick={() => setAssignedMedia(prev => prev.filter(m => m.id !== media.id))}
                      >
                        <X className="h-4 w-4" />
                      </Button>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-6 text-muted-foreground border-2 border-dashed rounded">
                  <Image className="h-8 w-8 mx-auto mb-2 opacity-50" />
                  <p className="text-sm">No media assigned</p>
                  <p className="text-xs">Click "Assign Media" to add images, videos, or documents</p>
                </div>
              )}
            </div>

            <div>
              <label className="text-sm font-medium">Release Date (Optional)</label>
              <input
                type="date"
                className="w-full mt-1 px-3 py-2 border rounded-md"
                value={newReleaseData.releaseDate}
                onChange={(e) => setNewReleaseData({ ...newReleaseData, releaseDate: e.target.value })}
              />
            </div>

            <div className="flex flex-col sm:flex-row gap-2">
              <Button 
                onClick={handleCreateRelease}
                disabled={createReleaseMutation.isPending}
                className="flex items-center justify-center gap-2 w-full sm:w-auto"
              >
                <FileText className="h-4 w-4" />
                <span className="hidden xs:inline">Create Manual Release</span>
                <span className="xs:hidden">Manual</span>
              </Button>
              
              <Button 
                onClick={handleAutoGenerate}
                disabled={autoGenerateMutation.isPending}
                variant="outline"
                className="flex items-center justify-center gap-2 w-full sm:w-auto"
              >
                <Globe className="h-4 w-4" />
                <span className="hidden xs:inline">Auto-Generate Release</span>
                <span className="xs:hidden">Auto-Generate</span>
              </Button>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Press Releases List */}
      <div className="grid gap-4">
        {pressReleases.length === 0 ? (
          <Card>
            <CardContent className="flex flex-col items-center justify-center py-12">
              <FileText className="h-12 w-12 text-muted-foreground mb-4" />
              <h3 className="text-lg font-semibold mb-2">No Press Releases</h3>
              <p className="text-muted-foreground text-center">
                Create your first press release to get started with media distribution
              </p>
            </CardContent>
          </Card>
        ) : (
          pressReleases.map((release: PressRelease) => {
            const artist = managedArtists.find((a: Artist) => a.userId === release.primaryArtistId);
            
            return (
              <Card key={release.id}>
                <CardHeader>
                  <div className="flex justify-between items-start">
                    <div className="flex items-start gap-3">
                      {getReleaseTypeIcon(release.type)}
                      <div>
                        <CardTitle className="text-lg">{release.title}</CardTitle>
                        <CardDescription className="flex items-center gap-2 mt-1">
                          <span>{artist?.stageNames?.[0] || artist?.fullName || 'Unknown Artist'}</span>
                          <span>•</span>
                          <span>{new Date(release.createdAt).toLocaleDateString()}</span>
                          {release.isAutoGenerated && (
                            <>
                              <span>•</span>
                              <Badge variant="outline" className="text-xs">Auto-Generated</Badge>
                            </>
                          )}
                        </CardDescription>
                      </div>
                    </div>
                    
                    <div className="flex items-center gap-2">
                      {getStatusBadge(release.status)}
                    </div>
                  </div>
                </CardHeader>
                
                <CardContent>
                  <p className="text-sm text-muted-foreground mb-4 line-clamp-3">
                    {release.content.length > 150 
                      ? `${release.content.substring(0, 150)}...` 
                      : release.content
                    }
                  </p>
                  
                  <div className="flex justify-between items-center">
                    <div className="flex gap-2">
                      <Button 
                        size="sm" 
                        variant="outline"
                        onClick={() => handleViewRelease(release)}
                      >
                        <Eye className="h-4 w-4 mr-1" />
                        View
                      </Button>
                      <Button 
                        size="sm" 
                        variant="outline"
                        onClick={() => handleEditRelease(release)}
                      >
                        <Edit className="h-4 w-4 mr-1" />
                        Edit
                      </Button>
                    </div>
                    
                    {release.status === 'draft' && (
                      <Button 
                        size="sm"
                        onClick={() => handlePublish(release)}
                        disabled={publishMutation.isPending}
                        className="flex items-center gap-1"
                      >
                        <Send className="h-4 w-4" />
                        Publish & Distribute
                      </Button>
                    )}
                  </div>
                </CardContent>
              </Card>
            );
          })
        )}
      </div>

      {/* Statistics */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center gap-2">
              <FileText className="h-5 w-5 text-blue-500" />
              <div>
                <p className="text-sm text-muted-foreground">Total Releases</p>
                <p className="text-2xl font-bold">{pressReleases.length}</p>
              </div>
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center gap-2">
              <Send className="h-5 w-5 text-green-500" />
              <div>
                <p className="text-sm text-muted-foreground">Published</p>
                <p className="text-2xl font-bold">
                  {pressReleases.filter((r: PressRelease) => r.status === 'published').length}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center gap-2">
              <Globe className="h-5 w-5 text-purple-500" />
              <div>
                <p className="text-sm text-muted-foreground">Auto-Generated</p>
                <p className="text-2xl font-bold">
                  {pressReleases.filter((r: PressRelease) => r.isAutoGenerated).length}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* View Press Release Modal */}
      <Dialog open={isViewModalOpen} onOpenChange={setIsViewModalOpen}>
        <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <Eye className="h-5 w-5" />
              View Press Release
            </DialogTitle>
            <DialogDescription>
              Review the complete press release content and details
            </DialogDescription>
          </DialogHeader>
          
          {selectedRelease && (
            <div className="space-y-6">
              <div>
                <h3 className="text-xl font-bold mb-2">{selectedRelease.title}</h3>
                <div className="flex flex-wrap gap-2 mb-4">
                  {getStatusBadge(selectedRelease.status)}
                  <Badge variant="outline">{selectedRelease.type}</Badge>
                  {selectedRelease.isAutoGenerated && (
                    <Badge variant="outline">Auto-Generated</Badge>
                  )}
                </div>
              </div>
              
              <div className="space-y-4">
                <div>
                  <h4 className="font-semibold mb-2">Content</h4>
                  <div className="bg-muted p-4 rounded-lg">
                    <div dangerouslySetInnerHTML={{ 
                      __html: selectedRelease.content.replace(/\n/g, '<br />') 
                    }} />
                  </div>
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <h4 className="font-semibold mb-2">Details</h4>
                    <div className="space-y-2 text-sm">
                      <div><strong>Created:</strong> {new Date(selectedRelease.createdAt).toLocaleString()}</div>
                      <div><strong>Last Updated:</strong> {new Date(selectedRelease.updatedAt).toLocaleString()}</div>
                      {selectedRelease.publishedAt && (
                        <div><strong>Published:</strong> {new Date(selectedRelease.publishedAt).toLocaleString()}</div>
                      )}
                    </div>
                  </div>
                  
                  <div>
                    <h4 className="font-semibold mb-2">Distribution</h4>
                    <div className="space-y-2 text-sm">
                      <div><strong>Channels:</strong> {selectedRelease.distributionChannels?.join(', ') || 'Not specified'}</div>
                      <div><strong>Regions:</strong> {selectedRelease.targetRegions?.join(', ') || 'Global'}</div>
                      <div><strong>Contact:</strong> {selectedRelease.contactEmail || 'press@waitumusic.com'}</div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>

      {/* Edit Press Release Modal */}
      <Dialog open={isEditModalOpen} onOpenChange={setIsEditModalOpen}>
        <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <Edit className="h-5 w-5" />
              Edit Press Release
            </DialogTitle>
            <DialogDescription>
              Modify press release content and settings
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-4">
            <div>
              <label className="text-sm font-medium">Title</label>
              <input
                type="text"
                className="w-full mt-1 px-3 py-2 border rounded-md"
                value={newReleaseData.title}
                onChange={(e) => setNewReleaseData({ ...newReleaseData, title: e.target.value })}
                placeholder="Press release title"
              />
            </div>
            
            <div>
              <label className="text-sm font-medium">Content</label>
              <div className="border rounded-md mt-1">
                <ReactQuill
                  theme="snow"
                  value={newReleaseData.content}
                  onChange={(content) => setNewReleaseData({ ...newReleaseData, content })}
                  placeholder="Edit press release content with rich formatting..."
                  modules={{
                    toolbar: [
                      [{ 'header': [1, 2, 3, false] }],
                      ['bold', 'italic', 'underline', 'strike'],
                      [{ 'color': [] }, { 'background': [] }],
                      [{ 'list': 'ordered'}, { 'list': 'bullet' }],
                      [{ 'align': [] }],
                      ['link', 'image'],
                      ['clean']
                    ],
                  }}
                  formats={[
                    'header', 'bold', 'italic', 'underline', 'strike',
                    'color', 'background', 'list', 'bullet', 'align',
                    'link', 'image'
                  ]}
                  style={{ minHeight: '300px' }}
                />
              </div>
            </div>

            {/* Media Assignment Section for Edit Modal */}
            <div className="border rounded-lg p-4">
              <div className="flex items-center justify-between mb-4">
                <div>
                  <h4 className="font-medium">Media Attachments</h4>
                  <p className="text-sm text-muted-foreground">
                    Assign images, videos, and documents to this press release
                  </p>
                </div>
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => setShowMediaAssignmentModal(true)}
                >
                  <Plus className="h-4 w-4 mr-2" />
                  Assign Media
                </Button>
              </div>
              
              {/* Assigned Media Preview */}
              {assignedMedia.length > 0 ? (
                <div className="grid gap-3">
                  {assignedMedia.map((media) => (
                    <div key={media.id} className="flex items-center justify-between p-3 border rounded">
                      <div className="flex items-center space-x-3">
                        {media.type === 'image' && <Image className="h-5 w-5 text-blue-500" />}
                        {media.type === 'video' && <Video className="h-5 w-5 text-green-500" />}
                        {media.type === 'document' && <FileText className="h-5 w-5 text-orange-500" />}
                        <div>
                          <p className="font-medium text-sm">{media.name}</p>
                          <p className="text-xs text-muted-foreground">
                            {media.type} • {media.size}
                          </p>
                        </div>
                      </div>
                      <Button
                        variant="ghost"
                        size="sm"
                        type="button"
                        onClick={() => setAssignedMedia(prev => prev.filter(m => m.id !== media.id))}
                      >
                        <X className="h-4 w-4" />
                      </Button>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-6 text-muted-foreground border-2 border-dashed rounded">
                  <Image className="h-8 w-8 mx-auto mb-2 opacity-50" />
                  <p className="text-sm">No media assigned</p>
                  <p className="text-xs">Click "Assign Media" to add images, videos, or documents</p>
                </div>
              )}
            </div>
            
            <div className="flex justify-end gap-2">
              <Button 
                variant="outline" 
                onClick={() => setIsEditModalOpen(false)}
              >
                Cancel
              </Button>
              <Button 
                onClick={() => {
                  // Update the release here
                  toast({ title: "Press Release Updated", description: "Changes saved successfully" });
                  setIsEditModalOpen(false);
                }}
              >
                Save Changes
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Media Assignment Modal */}
      <MediaAssignmentModal
        isOpen={showMediaAssignmentModal}
        onClose={() => setShowMediaAssignmentModal(false)}
        assignedMedia={assignedMedia}
        onAssignMedia={setAssignedMedia}
      />
    </div>
  );
}